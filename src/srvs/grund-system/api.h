#pragma once
// Generated by chatty from src/srvs/grund-system/api.idl
// DO NOT EDIT
#include <karm-base/std.h>
namespace Grund {

struct IBus {
    static constexpr auto _UID = 0x6e4b38bfd57741ac;
    static constexpr auto _NAME = "Bus";

    template <typename T>
    struct _Client;

    auto _dispatch(auto &);

    virtual ~IBus() = default;

    static constexpr auto broadcast_UID = 0xb605ea609b9dfcf2;
    virtual None broadcast() = 0;
};

template <typename T>
struct IBus::_Client : public IBus {
    T _t;

    _Client(T t) : _t{t} {}

    None broadcast() {
        return _t.template invoke<IBus, broadcast_UID, None>();
    }
};

auto IBus::_dispatch(auto &o) {
    switch (o.mid) {

    case broadcast_UID:
        return o.template call<>([&]<typename... Args>(Args &&...args) {
            return broadcast(std::forward<Args>(args)...);
        });

    default:
        return o.error();
    }
}

} // namespace Grund
