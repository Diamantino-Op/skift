#pragma once
// Generated by chatty from src/srvs/grund-device/api.idl
// DO NOT EDIT
#include <karm-ipc/base.h>
namespace Grund::Device {

struct IClient {
    static constexpr auto _UID = 0x577d7068826de925;
    static constexpr auto _NAME = "Client";

    template <typename T>
    struct _Client;

    auto _dispatch(auto &);

    virtual ~IClient() = default;

    static constexpr auto event_UID = 0x4119639092e62c55;
    virtual Res<> event(ClientEvent e) = 0;
};

struct IHost {
    static constexpr auto _UID = 0xc2ca16d048ec66e0;
    static constexpr auto _NAME = "Host";

    template <typename T>
    struct _Client;

    auto _dispatch(auto &);

    virtual ~IHost() = default;

    static constexpr auto bubble_UID = 0xa3fa9e0b6b24b1ca;
    virtual Res<> bubble(HostEvent e) = 0;

    static constexpr auto flip_UID = 0xe6e5fd26daa9bca9;
    virtual Res<> flip(Vec<Math::Recti> r) = 0;
};

template <typename T>
struct IClient::_Client : public IClient {
    T _t;

    _Client(T t) : _t{t} {}

    Res<> event(ClientEvent e) {
        return _t.template invoke<IClient, event_UID, Res<>, ClientEvent>(e);
    }
};

template <typename T>
struct IHost::_Client : public IHost {
    T _t;

    _Client(T t) : _t{t} {}

    Res<> bubble(HostEvent e) {
        return _t.template invoke<IHost, bubble_UID, Res<>, HostEvent>(e);
    }

    Res<> flip(Vec<Math::Recti> r) {
        return _t.template invoke<IHost, flip_UID, Res<>, Vec<Math::Recti>>(r);
    }
};

auto IClient::_dispatch(auto &o) {
    switch (o.mid) {

    case event_UID:
        return o.template call<ClientEvent>([&]<typename... Args>(Args &&...args) {
            return event(std::forward<Args>(args)...);
        });

    default:
        return o.error();
    }
}

auto IHost::_dispatch(auto &o) {
    switch (o.mid) {

    case bubble_UID:
        return o.template call<HostEvent>([&]<typename... Args>(Args &&...args) {
            return bubble(std::forward<Args>(args)...);
        });

    case flip_UID:
        return o.template call<Vec<Math::Recti>>([&]<typename... Args>(Args &&...args) {
            return flip(std::forward<Args>(args)...);
        });

    default:
        return o.error();
    }
}

} // namespace Grund::Device
