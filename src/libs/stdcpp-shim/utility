#pragma once

#include <karm-meta/cvrp.h>

namespace std {

template <typename T>
constexpr Karm::Meta::RemoveRef<T> &&move(T &&t) noexcept {
    return static_cast<Karm::Meta::RemoveRef<T> &&>(t);
}

template <typename T>
constexpr T &&forward(Karm::Meta::RemoveRef<T> &param) {
    return static_cast<T &&>(param);
}

template <typename T>
constexpr T &&forward(Karm::Meta::RemoveRef<T> &&param) {
    return static_cast<T &&>(param);
}

template <typename T, typename U = T>
constexpr T exchange(T &slot, U &&value) {
    T old = std::move(slot);
    slot = std::forward<U>(value);
    return old;
}

template <typename T>
constexpr void swap(T &lhs, T &rhs) {
    T tmp = std::move(lhs);
    lhs = std::move(rhs);
    rhs = std::move(tmp);
}

} // namespace std
